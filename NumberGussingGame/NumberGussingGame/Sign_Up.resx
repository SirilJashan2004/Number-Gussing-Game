<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>